import java.util.regex.Pattern
import java.util.regex.Matcher

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'idea'

idea {
    project {
        languageLevel = '1.8'
    }
}

version = '0.0'
group = 'sylvantus.titanrealms' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'titanrealms'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation"

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                titanrealms {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                titanrealms {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'titanrealms', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                titanrealms {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

compileJava {
    options.encoding = 'UTF-8'
}

repositories {
    maven {
        name 'Modmaven'
        url 'https://modmaven.dev/'
    }
    maven {
        name 'Prog'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'curseforge'
        url 'https://www.cursemaven.com'
    }
    maven {
        name 'forge'
        url 'https://maven.latmod.com'
    }
    maven {
        // Temporary mappings
        url 'https://www.dogforce-games.com/maven/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly "mekanism:Mekanism:${mekanism_version}:api"
    compileOnly "org.jetbrains:annotations:${jb_annotations}"
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}:api")
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")

    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}") // JEI
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "titanrealms",
            "Specification-Vendor": "sylvantus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"sylvantus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

processResources {
    Matcher matcherVersion

    def configFile = file("config.xml")
        def configText = configFile.getText()

        def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
        def matcherDev = patternDev.matcher(configText)
        matcherDev.find()
        def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if (isDev) {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\-(\\w+).(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def dev = matcherVersion.group(4)
        def devVersion = Integer.parseInt(matcherVersion.group(5))

        project.version = major + "." + minor + "." + patch + "-" + dev + "." + devVersion
    } else {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        project.version = major + "." + minor + "." + patch
    }

    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':minecraft_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task incrementPatch {
    String oldVersion
    String newVersion
    Matcher matcherVersion

    println(":incrementPatch - Incrementing Patch Version ...")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if(isDev) {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\-(\\w+).(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def dev = matcherVersion.group(4)
        def devVersion = Integer.parseInt(matcherVersion.group(5))

        oldVersion = major + "." + minor + "." + patch + "-" + dev + "." + devVersion
        newVersion = major + "." + minor + "." + (patch + 1)
    }
    else {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + minor + "." + (patch + 1)
    }

    println(":incrementPatch - Current Version: " + oldVersion)
    println(":incrementPatch - New Version:     " + newVersion)
    project.version = newVersion

    def configVersion = matcherVersion.replaceAll("<version>"+ newVersion +"</version>")
    matcherDev = patternDev.matcher(configVersion)
    matcherDev.find()
    def configIsDev = matcherDev.replaceAll("<isDev>false</isDev>")
    configFile.write(configIsDev)
}

task getModData() {
    println(":getModData - Getting mod-related data from config")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternModid = Pattern.compile("<modid>(\\p{Print}+)</modid>")
    def patternMcVersion = Pattern.compile("<mcversion>(\\p{Print}+)</mcversion>")
    def patternGroup = Pattern.compile("<group>(\\p{Graph}+)</group>")

    def matcherModid = patternModid.matcher(configText)
    def matcherMcVersion = patternMcVersion.matcher(configText)
    def matcherGroup = patternGroup.matcher(configText)
    matcherModid.find()
    matcherMcVersion.find()
    matcherGroup.find()

    def configModid = matcherModid.group(1)
    def configMcVersion = matcherMcVersion.group(1)
    def configGroup = matcherGroup.group(1)

    println(":getModData - ModID:      " + configModid)
    println(":getModData - MC-Version: " + configMcVersion)
    println(":getModData - Group:      " + configGroup)

    project.archivesBaseName = configModid + "-" + configMcVersion
    println(project.archivesBaseName)
    project.group = configGroup
}

build.mustRunAfter getModData
